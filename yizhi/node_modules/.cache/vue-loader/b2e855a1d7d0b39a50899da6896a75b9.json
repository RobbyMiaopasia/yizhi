{"remainingRequest":"D:\\shixun\\yizhi\\yizhi\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\shixun\\yizhi\\yizhi\\src\\components\\ChinaMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\shixun\\yizhi\\yizhi\\src\\components\\ChinaMap.vue","mtime":1630459846191},{"path":"D:\\shixun\\yizhi\\yizhi\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\shixun\\yizhi\\yizhi\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\shixun\\yizhi\\yizhi\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\shixun\\yizhi\\yizhi\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\shixun\\yizhi\\yizhi\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgQ01hcCBmcm9tICIuLi8uLi9wdWJsaWMvc3RhdGljL21hcC9qc29uL2NoaW5hLmpzb24iOw0KaW1wb3J0IHsgZ2V0UHJvdmluY2VNYXBJbmZvIH0gZnJvbSAiLi4vdXRpbHMvbWFwX3V0aWxzIjsNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogImNoaW5hbWFwIiwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgbWFwOiAiIiwNCiAgICAgIG15Q2hhcnQ6ICIiLA0KICAgICAgZWNoYXJ0czogIiIsDQogICAgICBtYXBEYXRhOiAiIiwNCiAgICB9Ow0KICB9LA0KICBtb3VudGVkKCkgew0KICAgIHRoaXMuaW5pdEVjaGFydE1hcCgpOw0KICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJyZXNpemUiLCB0aGlzLnNjcmVlbkFkYXB0ZXIpOw0KICB9LA0KICBiZWZvcmVVcGRhdGUoKSB7DQogICAgdGhpcy5zY3JlZW5BZGFwdGVyKCk7DQogIH0sDQogIGRlc3Ryb3llZCgpIHsNCiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigicmVzaXplIiwgdGhpcy5zY3JlZW5BZGFwdGVyKTsNCiAgfSwNCiAgbWV0aG9kczogew0KICAgIC8v5Yid5aeL5YyW5Lit5Zu95Zyw5Zu+DQogICAgYXN5bmMgaW5pdEVjaGFydE1hcCgpIHsNCiAgICAgIGxldCBhbGxEYXRhID0gYXdhaXQgdGhpcy4kYXhpb3MuZ2V0KCIvY2hpbmFtYXAiKTsNCiAgICAgIGFsbERhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFsbERhdGEuZGF0YSkpOw0KICAgICAgdGhpcy5lY2hhcnRzID0gcmVxdWlyZSgiZWNoYXJ0cyIpOw0KICAgICAgdGhpcy5teUNoYXJ0ID0gdGhpcy5lY2hhcnRzLmluaXQodGhpcy4kcmVmcy5tYXBfcmVmLCAiY2hhbGsiKTsNCiAgICAgIHRoaXMuZWNoYXJ0cy5yZWdpc3Rlck1hcCgiY2hpbmEiLCB7IGdlb0pTT046IENNYXAgfSk7DQogICAgICBhbGxEYXRhLm1hcChmdW5jdGlvbiAoaSkgew0KICAgICAgICBpLm5hbWUgPSBpLnVwTmFtZTsNCiAgICAgICAgaS52YWx1ZSA9IGkudG90YWxDb25maXJtOw0KICAgICAgICByZXR1cm4gaTsNCiAgICAgIH0pOw0KICAgICAgY29uc3Qgb3B0aW9ucyA9IHsNCiAgICAgICAgdGl0bGU6IHsNCiAgICAgICAgICB0ZXh0OiAi5YWo5Zu9546w5a2Y56Gu6K+K5YiG5biD5Zu+IiwNCiAgICAgICAgICBsZWZ0OiAiY2VudGVyIiwNCiAgICAgICAgICB0b3A6IDIwLA0KICAgICAgICB9LA0KICAgICAgICB2aXN1YWxNYXA6IHsNCiAgICAgICAgICBzaG93OiB0cnVlLA0KICAgICAgICAgIGxlZnQ6ICI1JSIsDQogICAgICAgICAgYm90dG9tOiAiNSUiLA0KICAgICAgICAgIHNob3dMYWJlbDogdHJ1ZSwNCiAgICAgICAgICBwaWVjZXM6IFsNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgZ3RlOiAxMDAwLA0KICAgICAgICAgICAgICBsYWJlbDogIj49IDEwMDAiLA0KICAgICAgICAgICAgICBjb2xvcjogIiMzYzU3Y2UiLA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgZ3RlOiA1MDAsDQogICAgICAgICAgICAgIGx0OiA5OTksDQogICAgICAgICAgICAgIGxhYmVsOiAiNTAwIC0gOTk5IiwNCiAgICAgICAgICAgICAgY29sb3I6ICIjNmY4M2RiIiwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgIGd0ZTogMTAwLA0KICAgICAgICAgICAgICBsdDogNDk5LA0KICAgICAgICAgICAgICBsYWJlbDogIjEwMCAtIDQ5OSIsDQogICAgICAgICAgICAgIGNvbG9yOiAiIzlmYWNlNyIsDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICBndGU6IDEwLA0KICAgICAgICAgICAgICBsdDogOTksDQogICAgICAgICAgICAgIGxhYmVsOiAiMTAgLSA5OSIsDQogICAgICAgICAgICAgIGNvbG9yOiAiI2I4YzRmNSIsDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICBsdDogMTAsDQogICAgICAgICAgICAgIGxhYmVsOiAiPDEwIiwNCiAgICAgICAgICAgICAgY29sb3I6ICIjZDJkOGYwIiwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgXSwNCiAgICAgICAgfSwNCiAgICAgICAgdG9vbHRpcDogew0KICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHBhcmFtcykgew0KICAgICAgICAgICAgaWYgKHBhcmFtcy5kYXRhKSB7DQogICAgICAgICAgICAgIHJldHVybiAoDQogICAgICAgICAgICAgICAgcGFyYW1zLm5hbWUgKw0KICAgICAgICAgICAgICAgICI8YnI+IiArDQogICAgICAgICAgICAgICAgIueOsOWtmOehruivijoiICsNCiAgICAgICAgICAgICAgICBwYXJhbXMuZGF0YS50b3RhbE5vd0NvbmZpcm0gKw0KICAgICAgICAgICAgICAgICI8YnI+IiArDQogICAgICAgICAgICAgICAgIue0r+iuoeehruivijoiICsNCiAgICAgICAgICAgICAgICBwYXJhbXMuZGF0YS50b3RhbENvbmZpcm0gKw0KICAgICAgICAgICAgICAgICI8YnI+IiArDQogICAgICAgICAgICAgICAgIue0r+iuoeayu+aEiDoiICsNCiAgICAgICAgICAgICAgICBwYXJhbXMuZGF0YS50b3RhbEhlYWwgKw0KICAgICAgICAgICAgICAgICI8YnI+IiArDQogICAgICAgICAgICAgICAgIue0r+iuoeatu+S6oToiICsNCiAgICAgICAgICAgICAgICBwYXJhbXMuZGF0YS50b3RhbERlYWQgKw0KICAgICAgICAgICAgICAgICI8YnI+IiArDQogICAgICAgICAgICAgICAgIuS7iuaXpeaWsOWinjoiICsNCiAgICAgICAgICAgICAgICBwYXJhbXMuZGF0YS50b2RheUNvbmZpcm0NCiAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgIHJldHVybiA8cD7mmoLml6Dor6XnnIHku73mlbDmja48L3A+Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0sDQogICAgICAgIH0sDQogICAgICAgIHRvb2xib3g6IHsNCiAgICAgICAgICBzaG93OiB0cnVlLA0KICAgICAgICAgIGZlYXR1cmU6IHsNCiAgICAgICAgICAgIHNhdmVBc0ltYWdlOiB7DQogICAgICAgICAgICAgIHBpeGVsUmF0aW86IDQsDQogICAgICAgICAgICB9LA0KICAgICAgICAgIH0sDQogICAgICAgIH0sDQogICAgICAgIHNlcmllczogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgIHR5cGU6ICJtYXAiLA0KICAgICAgICAgICAgbWFwOiAiY2hpbmEiLA0KICAgICAgICAgICAgc2VsZWN0ZWRNb2RlOiAiZmFsc2UiLCAvL+aYr+WQpuWFgeiuuOmAieS4reWkmuS4quWMuuWfnw0KICAgICAgICAgICAgem9vbTogMSwNCiAgICAgICAgICAgIHJvYW06IHRydWUsDQogICAgICAgICAgICBzY2FsZUxpbWl0OiB7DQogICAgICAgICAgICAgIG1pbjogMSwNCiAgICAgICAgICAgICAgbWF4OiAzLA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIGxhYmVsOiB7DQogICAgICAgICAgICAgIHNob3c6IHRydWUsDQogICAgICAgICAgICAgIGZvbnRTaXplOiAiMTQiLA0KICAgICAgICAgICAgICBjb2xvcjogInJnYmEoMCwwLDAsMC43KSIsDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgZW1waGFzaXM6IHsNCiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICJyZ2JhKDAsIDAsIDAsIDAuMikiLA0KICAgICAgICAgICAgICBpdGVtU3R5bGU6IHsNCiAgICAgICAgICAgICAgICBhcmVhQ29sb3I6ICIjZjJkNWFkIiwNCiAgICAgICAgICAgICAgICBzaGFkb3dPZmZzZXRYOiAwLA0KICAgICAgICAgICAgICAgIHNoYWRvd09mZnNldFk6IDAsDQogICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDAsDQogICAgICAgICAgICAgIH0sDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgZGF0YTogYWxsRGF0YSwNCiAgICAgICAgICB9LA0KICAgICAgICBdLA0KICAgICAgfTsNCiAgICAgIHRoaXMubXlDaGFydC5zZXRPcHRpb24ob3B0aW9ucyk7DQogICAgICB0aGlzLm15Q2hhcnQub24oImNsaWNrIiwgKGFyZykgPT4gew0KICAgICAgICBjb25zdCBwcm92aW5jZUluZm8gPSBnZXRQcm92aW5jZU1hcEluZm8oYXJnLm5hbWUpOw0KICAgICAgICB0aGlzLiRlbWl0KCJjaGFuZ2Vwck5hbWUiLCBwcm92aW5jZUluZm8ua2V5KTsNCiAgICAgICAgdGhpcy4kZW1pdCgiY2hhbmdlcHJQYXRoIiwgcHJvdmluY2VJbmZvLnBhdGgpOw0KICAgICAgICB0aGlzLiRlbWl0KCJjaGFuZ2VwclRpdGxlIiwgYXJnLm5hbWUpOw0KICAgICAgfSk7DQogICAgfSwNCg0KICAgIC8v6YCC6YWN5YiG6L6o546HDQogICAgYXN5bmMgc2NyZWVuQWRhcHRlcigpIHsNCiAgICAgIGNvbnN0IHRpdGxlRm9udFNpemUgPSAodGhpcy4kcmVmcy5tYXBfcmVmLm9mZnNldFdpZHRoIC8gMTAwKSAqIDIuNDsNCiAgICAgIGxldCBhZGFwdGVyT3B0aW9uID0gew0KICAgICAgICB0aXRsZTogew0KICAgICAgICAgIHRleHRTdHlsZTogew0KICAgICAgICAgICAgZm9udFNpemU6IHRpdGxlRm9udFNpemUsDQogICAgICAgICAgfSwNCiAgICAgICAgfSwNCiAgICAgIH07DQogICAgICB0aGlzLm15Q2hhcnQuc2V0T3B0aW9uKGFkYXB0ZXJPcHRpb24pOw0KICAgICAgdGhpcy5teUNoYXJ0LnJlc2l6ZSgpOw0KICAgIH0sDQogIH0sDQp9Ow0K"},{"version":3,"sources":["ChinaMap.vue"],"names":[],"mappingsfile":"ChinaMap.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"com-container\">\r\n    <div class=\"com-chart\" id=\"map_ref\" ref=\"map_ref\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CMap from \"../../public/static/map/json/china.json\";\r\nimport { getProvinceMapInfo } from \"../utils/map_utils\";\r\nexport default {\r\n  name: \"chinamap\",\r\n  data() {\r\n    return {\r\n      map: \"\",\r\n      myChart: \"\",\r\n      echarts: \"\",\r\n      mapData: \"\",\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initEchartMap();\r\n    window.addEventListener(\"resize\", this.screenAdapter);\r\n  },\r\n  beforeUpdate() {\r\n    this.screenAdapter();\r\n  },\r\n  destroyed() {\r\n    window.removeEventListener(\"resize\", this.screenAdapter);\r\n  },\r\n  methods: {\r\n    //初始化中国地图\r\n    async initEchartMap() {\r\n      let allData = await this.$axios.get(\"/chinamap\");\r\n      allData = JSON.parse(JSON.stringify(allData.data));\r\n      this.echarts = require(\"echarts\");\r\n      this.myChart = this.echarts.init(this.$refs.map_ref, \"chalk\");\r\n      this.echarts.registerMap(\"china\", { geoJSON: CMap });\r\n      allData.map(function (i) {\r\n        i.name = i.upName;\r\n        i.value = i.totalConfirm;\r\n        return i;\r\n      });\r\n      const options = {\r\n        title: {\r\n          text: \"全国现存确诊分布图\",\r\n          left: \"center\",\r\n          top: 20,\r\n        },\r\n        visualMap: {\r\n          show: true,\r\n          left: \"5%\",\r\n          bottom: \"5%\",\r\n          showLabel: true,\r\n          pieces: [\r\n            {\r\n              gte: 1000,\r\n              label: \">= 1000\",\r\n              color: \"#3c57ce\",\r\n            },\r\n            {\r\n              gte: 500,\r\n              lt: 999,\r\n              label: \"500 - 999\",\r\n              color: \"#6f83db\",\r\n            },\r\n            {\r\n              gte: 100,\r\n              lt: 499,\r\n              label: \"100 - 499\",\r\n              color: \"#9face7\",\r\n            },\r\n            {\r\n              gte: 10,\r\n              lt: 99,\r\n              label: \"10 - 99\",\r\n              color: \"#b8c4f5\",\r\n            },\r\n            {\r\n              lt: 10,\r\n              label: \"<10\",\r\n              color: \"#d2d8f0\",\r\n            },\r\n          ],\r\n        },\r\n        tooltip: {\r\n          formatter: function (params) {\r\n            if (params.data) {\r\n              return (\r\n                params.name +\r\n                \"<br>\" +\r\n                \"现存确诊:\" +\r\n                params.data.totalNowConfirm +\r\n                \"<br>\" +\r\n                \"累计确诊:\" +\r\n                params.data.totalConfirm +\r\n                \"<br>\" +\r\n                \"累计治愈:\" +\r\n                params.data.totalHeal +\r\n                \"<br>\" +\r\n                \"累计死亡:\" +\r\n                params.data.totalDead +\r\n                \"<br>\" +\r\n                \"今日新增:\" +\r\n                params.data.todayConfirm\r\n              );\r\n            } else {\r\n              return <p>暂无该省份数据</p>;\r\n            }\r\n          },\r\n        },\r\n        toolbox: {\r\n          show: true,\r\n          feature: {\r\n            saveAsImage: {\r\n              pixelRatio: 4,\r\n            },\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            type: \"map\",\r\n            map: \"china\",\r\n            selectedMode: \"false\", //是否允许选中多个区域\r\n            zoom: 1,\r\n            roam: true,\r\n            scaleLimit: {\r\n              min: 1,\r\n              max: 3,\r\n            },\r\n            label: {\r\n              show: true,\r\n              fontSize: \"14\",\r\n              color: \"rgba(0,0,0,0.7)\",\r\n            },\r\n            emphasis: {\r\n              borderColor: \"rgba(0, 0, 0, 0.2)\",\r\n              itemStyle: {\r\n                areaColor: \"#f2d5ad\",\r\n                shadowOffsetX: 0,\r\n                shadowOffsetY: 0,\r\n                borderWidth: 0,\r\n              },\r\n            },\r\n            data: allData,\r\n          },\r\n        ],\r\n      };\r\n      this.myChart.setOption(options);\r\n      this.myChart.on(\"click\", (arg) => {\r\n        const provinceInfo = getProvinceMapInfo(arg.name);\r\n        this.$emit(\"changeprName\", provinceInfo.key);\r\n        this.$emit(\"changeprPath\", provinceInfo.path);\r\n        this.$emit(\"changeprTitle\", arg.name);\r\n      });\r\n    },\r\n\r\n    //适配分辨率\r\n    async screenAdapter() {\r\n      const titleFontSize = (this.$refs.map_ref.offsetWidth / 100) * 2.4;\r\n      let adapterOption = {\r\n        title: {\r\n          textStyle: {\r\n            fontSize: titleFontSize,\r\n          },\r\n        },\r\n      };\r\n      this.myChart.setOption(adapterOption);\r\n      this.myChart.resize();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n</style>"]}]}